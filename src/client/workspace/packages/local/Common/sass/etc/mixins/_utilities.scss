// Utility generator
// Used to generate utilities & print utilities
@mixin generate-utility($utility, $infix, $is-rfs-media-query: false) {
  $utilityValues: map-get($utility, values);
  $keys: $utilityValues;
  $values: $utilityValues;

  // If the values are a list or string, convert it into a map
  @if type-of($utilityValues) == "map" {
    // $values: zip($values, $values);
    $keys: map-keys($utilityValues);
    $values: map-values($utilityValues)
  }

  $index : 1;
  @each $key in $keys {
    $properties: map-get($utility, property);
    $value: $key;
    @if type-of($values) == "list" {
      // $values: zip($values, $values);
      $value: nth($values, $index);
      $index: $index+1;
      //@debug 'map:#{$key},#{$value}';
    }
  
    // Multiple properties are possible, for example with vertical or horizontal margins or paddings
    @if type-of($properties) == "string" {
      $properties: append((), $properties);
    }

    // Use custom class if present
    $property-class: if(map-has-key($utility, class), map-get($utility, class), nth($properties, 1));
    $property-class: if($property-class == null, "", $property-class);


    $infix: if($property-class == "" and str-slice($infix, 1, 1) == "-", str-slice($infix, 2), $infix);

    @if($key == "none") {
      $infix: "-none";
    }
    @if($property-class == "d"){
      $infix: "";
    }

    // @debug '#{$property-class} value: #{$infix}';

    // Don't prefix if value key is null (eg. with shadow class)
    $property-class-modifier: if($key, if($property-class == "" and $infix == "", "", "-") + $key, "");

    // @if map-get($utility, rfs) {
    //   // Inside the media query
    //   @if $is-rfs-media-query {
    //     $val: rfs-value($value);

    //     // Do not render anything if fluid and non fluid values are the same
    //     $value: if($val == rfs-fluid-value($value), null, $val);
    //   }
    //   @else {
    //     $value: rfs-fluid-value($value);
    //   }
    // }
    //@debug '#{$property-class + $infix + $property-class-modifier}:#{$value}';

    @if $value != null {
      .#{$property-class + $infix + $property-class-modifier} {
        @each $property in $properties {
          #{$property}: $value if($enable-important-utilities, !important, null);
        }
      }
    }
  }
}
